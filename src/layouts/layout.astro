---
import '@/styles/global.css'

import { ClientRouter } from 'astro:transitions'

import { trim } from '@gpahal/std/strings'

import Nav from '@/components/nav/index.astro'

type Props = {
  title?: string
  description?: string
  article?: {
    publishedTime: number | Date
    tags?: Array<string>
  }
}

const { title: titleProp, description: descriptionProp, article } = Astro.props
const url = new URL(Astro.url.pathname, Astro.site)
const twitterImageUrl = new URL('/images/self/self-320x320.jpg', Astro.site)

const title = trim(titleProp ? `${titleProp} | Garvit Pahal` : 'Garvit Pahal')
const description = trim(descriptionProp || 'Software engineer interested in technology, football and movies.')

const isNavPage = trim(Astro.url.pathname, '/') === 'nav'
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" sizes="48x48" href="/favicon-48x48.png" />
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="Garvit Pahal" />
    <link rel="manifest" href="/site.webmanifest" />

    <link rel="canonical" href={url} />

    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content="Garvit Pahal" />
    <link rel="author" href={Astro.site} />
    <meta property="og:site_name" content="Garvit Pahal" />
    <meta property="og:type" content={article ? 'article' : 'website'} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={url} />
    {
      article && (
        <>
          <meta property="article:author" content="Garvit Pahal" />
          <meta property="article:published_time" content={new Date(article.publishedTime).toISOString()} />
          {article.tags?.map((tag) => (
            <meta property="article:tag" content={tag} />
          ))}
        </>
      )
    }
    <meta property="twitter:card" content="summary" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:creator" content="@g10pahal" />
    <meta property="twitter:image" content={twitterImageUrl} />
    <meta property="twitter:image:alt" content={title} />
    <meta property="twitter:image:type" content="image/jpeg" />
    <meta property="twitter:image:width" content="320" />
    <meta property="twitter:image:height" content="320" />

    <link rel="robots" href="/robots.txt" />
    <meta name="robots" content="index, follow" />

    <link rel="sitemap" type="application/xml" title="Sitemap" href="/sitemap-index.xml" />
    <link rel="alternate" type="application/rss+xml" title="Garvit Pahal | Blog" href="/blog.rss.xml" />

    <link rel="preload" as="font" type="font/woff2" href="/fonts/satoshi/variable.woff2" crossorigin="anonymous" />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href="/fonts/satoshi/variable-italic.woff2"
      crossorigin="anonymous"
    />

    <ClientRouter />
  </head>
  <body>
    <div class="relative min-h-dvh w-full lg:flex">
      <Nav isFullPage={isNavPage} />
      {
        !isNavPage && (
          <div class:list={['w-full', isNavPage ? '' : 'lg:px-20 xl:px-44 lg:ml-[17.5rem]']}>
            <main class="main-content w-full px-6 pb-24 pt-6 lg:max-w-xl lg:pb-6">
              <slot />
            </main>
          </div>
        )
      }
    </div>

    <script is:inline data-astro-rerun>
      function showScriptButtons() {
        const scriptButtonEls = document.querySelectorAll('button.script-button')
        for (const el of scriptButtonEls) {
          const htmlEl = el
          htmlEl.classList.remove('hidden')
        }
      }

      const drawerSettings = {
        speedOpen: 50,
        speedClose: 350,
        activeClass: 'is-active',
        visibleClass: 'is-visible',
        selectorTarget: '[data-drawer-target]',
        selectorTrigger: '[data-drawer-trigger]',
        selectorClose: '[data-drawer-close]',
      }

      // See: https://hiddedevries.nl/en/blog/2017-01-29-using-javascript-to-trap-focus-in-an-element
      function trapFocus(el) {
        const focusableEls = el.querySelectorAll(
          'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])',
        )

        const firstFocusableEl = focusableEls[0]
        // eslint-disable-next-line unicorn/prefer-at
        const lastFocusableEl = focusableEls[focusableEls.length - 1]

        el.addEventListener('keydown', function (e) {
          // eslint-disable-next-line unicorn/prefer-keyboard-event-key
          const isTabPressed = e.key === 'Tab' || e.keyCode === 9
          if (!isTabPressed) {
            return
          }

          if (e.shiftKey) {
            // Shift + Tab
            if (document.activeElement === firstFocusableEl) {
              lastFocusableEl.focus()
              e.preventDefault()
            }
          } else {
            // Tab
            if (document.activeElement === lastFocusableEl) {
              firstFocusableEl.focus()
              e.preventDefault()
            }
          }
        })
      }

      function toggleAccessibility(el) {
        if (el.getAttribute('aria-expanded') === 'true') {
          el.setAttribute('aria-expanded', 'false')
        } else {
          el.setAttribute('aria-expanded', 'true')
        }
      }

      function openDrawer(triggerEl) {
        // eslint-disable-next-line unicorn/prefer-query-selector
        const target = document.getElementById(triggerEl.getAttribute('aria-controls') || '')
        if (!target) {
          return
        }

        target.classList.add(drawerSettings.activeClass)
        document.documentElement.style.overflow = 'hidden'
        toggleAccessibility(triggerEl)
        setTimeout(function () {
          target.classList.add(drawerSettings.visibleClass)
          trapFocus(target)
        }, drawerSettings.speedOpen)
      }

      function closeDrawer(el) {
        const closestParent = el.closest(drawerSettings.selectorTarget)
        if (!closestParent) {
          return
        }

        const childrenTrigger = document.querySelector('[aria-controls="' + closestParent.id + '"')
        closestParent.classList.remove(drawerSettings.visibleClass)
        document.documentElement.style.overflow = ''
        if (childrenTrigger) {
          toggleAccessibility(childrenTrigger)
        }
        setTimeout(function () {
          closestParent.classList.remove(drawerSettings.activeClass)
        }, drawerSettings.speedClose)
      }

      function clickHandler(event) {
        const toggle = event.target
        if (!toggle) {
          return
        }

        const open = toggle.closest(drawerSettings.selectorTrigger)
        const close = toggle.closest(drawerSettings.selectorClose)
        if (open) {
          openDrawer(open)
        }
        if (close) {
          closeDrawer(close)
        }
        if (open || close) {
          event.preventDefault()
        }
      }

      function keydownHandler(event) {
        if (event.key === 'Escape' || event.keyCode === 27) {
          const drawers = document.querySelectorAll(drawerSettings.selectorTarget)
          let i
          for (i = 0; i < drawers.length; ++i) {
            if (drawers[i].classList.contains(drawerSettings.activeClass)) {
              closeDrawer(drawers[i])
            }
          }
        }
      }

      function setupMenuDrawer() {
        if (!Element.prototype.closest) {
          Element.prototype.closest = function (s) {
            // eslint-disable-next-line unicorn/no-this-assignment, @typescript-eslint/no-this-alias
            const el = this
            // eslint-disable-next-line unicorn/no-this-assignment, @typescript-eslint/no-this-alias
            let ancestor = this
            if (!document.documentElement.contains(el)) {
              return null
            }

            do {
              if (ancestor.matches(s)) {
                return ancestor
              }
              ancestor = ancestor.parentElement
            } while (ancestor !== null)
            return null
          }
        }

        document.addEventListener('click', clickHandler, false)
        document.addEventListener('keydown', keydownHandler, false)
      }

      document.addEventListener('astro:page-load', () => {
        showScriptButtons()
        setupMenuDrawer()
      })
    </script>
  </body>
</html>
